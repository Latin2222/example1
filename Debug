#include <set>

// Генерация всех возможных уникальных цветов
vector<Color> generateUniqueColors(size_t count) {
    set<Color> uniqueColors;

    while (uniqueColors.size() < count) {
        Color randomColor(rand() % 256, rand() % 256, rand() % 256);
        uniqueColors.insert(randomColor);
    }

    return vector<Color>(uniqueColors.begin(), uniqueColors.end());
}

void drawGraph(const array<Vector2f, vertexCount>& customPositions) {
    RenderWindow window(VideoMode(1000, 1000), "Graphs");
    Font font;
    font.loadFromFile("Arial.ttf");

    Texture arrowTexture;
    arrowTexture.loadFromFile("strela.png");

    CircleShape nodes[vertexCount];
    Text labels[vertexCount];
    Vector2f positions[vertexCount];

    srand(time(nullptr));

    // Генерация уникальных цветов для стрелок
    vector<Color> arrowColors = generateUniqueColors(connections.size());

    for (int i = 0; i < vertexCount; ++i) {
        positions[i] = customPositions[i];

        nodes[i].setRadius(nodeRadius);
        nodes[i].setOutlineColor(Color::Red);
        nodes[i].setOutlineThickness(3);
        nodes[i].setPosition(positions[i] - Vector2f(nodeRadius, nodeRadius));

        labels[i].setFont(font);
        labels[i].setString(to_string(i + 1));
        labels[i].setCharacterSize(39);
        labels[i].setFillColor(Color::Red);
        labels[i].setPosition(positions[i] - Vector2f(nodeRadius / 3, nodeRadius / 1.5));
    }

    while (window.isOpen()) {
        Event event;
        while (window.pollEvent(event)) {
            if (event.type == Event::Closed) {
                window.close();
            }
        }

        window.clear(Color::White);

        int colorIndex = 0;
        for (const auto& connection : connections) {
            Vector2f start = positions[connection.first - 1];
            Vector2f end = positions[connection.second - 1];
            float edgeLength = sqrt(pow(end.x - start.x, 2) + pow(end.y - start.y, 2));

            RectangleShape arrow(Vector2f(edgeLength - 40, 70.0f));
            arrow.setTexture(&arrowTexture);
            arrow.setPosition(start);
            arrow.setOrigin(0, 35);
            arrow.setRotation(atan2(end.y - start.y, end.x - start.x) * 180 / M_PI);

            arrow.setFillColor(arrowColors[colorIndex++]);

            window.draw(arrow);
        }

        for (int i = 0; i < vertexCount; ++i) {
            window.draw(nodes[i]);
            window.draw(labels[i]);
        }

        window.display();
    }
}
